
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Chapter 6 Final Setup - GuardDuty automation with Lambda, EventBridge, and SNS.

Resources:

  SNSGuardDutyAlerts:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: GuardDutyAlerts

  GuardDutyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: guardduty-response-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GuardDutyLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifyInstanceAttribute
                  - ec2:CreateSecurityGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"

  GuardDutyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GuardDutyResponse
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GuardDutyLambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          import boto3
          import json

          def lambda_handler(event, context):
              finding = event['detail']
              severity = finding['Severity']
              instance_id = finding.get('Resource', {}).get('InstanceDetails', {}).get('InstanceId')
              if severity >= 7.0 and instance_id:
                  ec2 = boto3.client('ec2')
                  resp = ec2.create_security_group(GroupName=f'ISOLATION-{instance_id}', Description='Isolation SG')
                  ec2.modify_instance_attribute(InstanceId=instance_id, Groups=[resp['GroupId']])
                  sns = boto3.client('sns')
                  sns.publish(
                      TopicArn='REPLACE_WITH_SNS_TOPIC_ARN',
                      Message=json.dumps(finding, indent=2),
                      Subject='High Severity GuardDuty Finding Detected'
                  )
              return {'statusCode': 200, 'body': json.dumps('Processed GuardDuty finding')}

  EventBridgeGuardDutyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: GuardDutyFindings
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
        detail:
          severity:
            - 5
            - 8
      Targets:
        - Arn: !GetAtt GuardDutyLambdaFunction.Arn
          Id: TargetFunctionV1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GuardDutyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeGuardDutyRule.Arn

  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true

  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Properties: {}
